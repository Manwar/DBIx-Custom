.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Custom::Model 3"
.TH DBIx::Custom::Model 3 "2011-07-30" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
DBIx::Custom::Model \- Model
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use DBIx::Custom::Table;
.PP
my \f(CW$table\fR = DBIx::Custom::Model\->new(table => 'books');
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .Sh """dbi"""
.el .Sh "\f(CWdbi\fP"
.IX Subsection "dbi"
.Vb 2
\&    my $dbi = $model->dbi;
\&    $model = $model->dbi($dbi);
.Ve
.PP
DBIx::Custom object.
.ie n .Sh """join"""
.el .Sh "\f(CWjoin\fP"
.IX Subsection "join"
.Vb 4
\&    my $join = $model->join;
\&    $model = $model->join(
\&        ['left outer join company on book.company_id = company.id']
\&    );
.Ve
.PP
Join clause, this value is passed to \f(CW\*(C`select\*(C'\fR method.
.ie n .Sh """primary_key"""
.el .Sh "\f(CWprimary_key\fP"
.IX Subsection "primary_key"
.Vb 2
\&    my $primary_key = $model->primary_key;
\&    $model = $model->primary_key(['id', 'number']);
.Ve
.PP
Primary key,this is passed to \f(CW\*(C`insert\*(C'\fR, \f(CW\*(C`update\*(C'\fR,
\&\f(CW\*(C`delete\*(C'\fR, and \f(CW\*(C`select\*(C'\fR method.
.ie n .Sh """table"""
.el .Sh "\f(CWtable\fP"
.IX Subsection "table"
.Vb 2
\&    my $table = $model->table;
\&    $model = $model->table('book');
.Ve
.PP
Table name, this is passed to \f(CW\*(C`select\*(C'\fR method.
.ie n .Sh """bind_type"""
.el .Sh "\f(CWbind_type\fP"
.IX Subsection "bind_type"
.Vb 2
\&    my $type = $model->bind_type;
\&    $model = $model->bind_type(['image' => DBI::SQL_BLOB]);
.Ve
.PP
Database data type, this is used as type optioon of \f(CW\*(C`insert\*(C'\fR, 
\&\f(CW\*(C`update\*(C'\fR, \f(CW\*(C`update_all\*(C'\fR, \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`delete_all\*(C'\fR,
\&\f(CW\*(C`select\*(C'\fR, and \f(CW\*(C`execute\*(C'\fR method
.SH "METHODS"
.IX Header "METHODS"
DBIx::Custom::Model inherits all methods from Object::Simple,
and you can use all methods of DBIx::Custom and \s-1DBI\s0
and implements the following new ones.
.ie n .Sh """delete"""
.el .Sh "\f(CWdelete\fP"
.IX Subsection "delete"
.Vb 1
\&    $table->delete(...);
.Ve
.PP
Same as \f(CW\*(C`delete\*(C'\fR of DBIx::Custom except that
you don't have to specify \f(CW\*(C`table\*(C'\fR option.
.ie n .Sh """delete_all"""
.el .Sh "\f(CWdelete_all\fP"
.IX Subsection "delete_all"
.Vb 1
\&    $table->delete_all(...);
.Ve
.PP
Same as \f(CW\*(C`delete_all\*(C'\fR of DBIx::Custom except that
you don't have to specify \f(CW\*(C`table\*(C'\fR option.
.ie n .Sh """insert"""
.el .Sh "\f(CWinsert\fP"
.IX Subsection "insert"
.Vb 1
\&    $table->insert(...);
.Ve
.PP
Same as \f(CW\*(C`insert\*(C'\fR of DBIx::Custom except that
you don't have to specify \f(CW\*(C`table\*(C'\fR option.
.ie n .Sh """method"""
.el .Sh "\f(CWmethod\fP"
.IX Subsection "method"
.Vb 3
\&    $model->method(
\&        update_or_insert => sub {
\&            my $self = shift;
.Ve
.PP
.Vb 4
\&            # ...
\&        },
\&        find_or_create   => sub {
\&            my $self = shift;
.Ve
.PP
.Vb 2
\&            # ...
\&    );
.Ve
.PP
Register method. These method is called directly from DBIx::Custom::Model object.
.PP
.Vb 2
\&    $model->update_or_insert;
\&    $model->find_or_create;
.Ve
.ie n .Sh """mycolumn"""
.el .Sh "\f(CWmycolumn\fP"
.IX Subsection "mycolumn"
.Vb 3
\&    my $column = $self->mycolumn;
\&    my $column = $self->mycolumn(book => ['author', 'title']);
\&    my $column = $self->mycolumn(['author', 'title']);
.Ve
.PP
Create column clause for myself. The follwoing column clause is created.
.PP
.Vb 2
\&    book.author as author,
\&    book.title as title
.Ve
.PP
If table name is ommited, \f(CW\*(C`table\*(C'\fR attribute of the model is used.
If column names is omitted, \f(CW\*(C`columns\*(C'\fR attribute of the model is used.
.ie n .Sh """new"""
.el .Sh "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $table = DBIx::Custom::Table->new;
.Ve
.PP
Create a DBIx::Custom::Table object.
.ie n .Sh """select"""
.el .Sh "\f(CWselect\fP"
.IX Subsection "select"
.Vb 1
\&    $table->select(...);
.Ve
.PP
Same as \f(CW\*(C`select\*(C'\fR of DBIx::Custom except that
you don't have to specify \f(CW\*(C`table\*(C'\fR option.
.ie n .Sh """update"""
.el .Sh "\f(CWupdate\fP"
.IX Subsection "update"
.Vb 1
\&    $table->update(...);
.Ve
.PP
Same as \f(CW\*(C`update\*(C'\fR of DBIx::Custom except that
you don't have to specify \f(CW\*(C`table\*(C'\fR option.
.ie n .Sh """update_all"""
.el .Sh "\f(CWupdate_all\fP"
.IX Subsection "update_all"
.Vb 1
\&    $table->update_all(param => \e%param);
.Ve
.PP
Same as \f(CW\*(C`update_all\*(C'\fR of DBIx::Custom except that
you don't have to specify table name.
